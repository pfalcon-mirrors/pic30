1c1
< .\" Automatically generated by Pod::Man v1.34, Pod::Parser v1.13
---
> .\" Automatically generated by Pod::Man 2.22 (Pod::Simple 3.07)
5,12d4
< .de Sh \" Subsection heading
< .br
< .if t .Sp
< .ne 5
< .PP
< \fB\\$1\fR
< .PP
< ..
28,32c20,24
< .\" double quote, and \*(R" will give a right double quote.  | will give a
< .\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
< .\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
< .\" expand to `' in nroff, nothing in troff, for use with C<>.
< .tr \(*W-|\(bv\*(Tr
---
> .\" double quote, and \*(R" will give a right double quote.  \*(C+ will
> .\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
> .\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
> .\" nothing in troff, for use with C<>.
> .tr \(*W-
50a43,46
> .\" Escape single quotes in literal strings from groff's Unicode transform.
> .ie \n(.g .ds Aq \(aq
> .el       .ds Aq '
> .\"
52c48
< .\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
---
> .\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
55c51
< .if \nF \{\
---
> .ie \nF \{\
62,65c58,61
< .\"
< .\" For nroff, turn off justification.  Always turn off hyphenation; it makes
< .\" way too many mistakes in technical documents.
< .hy 0
---
> .el \{\
> .    de IX
> ..
> .\}
131c127,131
< .TH LD 1 "2003-06-12" "binutils-2.14" "GNU Development Tools"
---
> .TH LD 1 "2011-01-11" "binutils-2.14 - Microchip %s Build date: Jan-11-2011" "GNU Development Tools"
> .\" For nroff, turn off justification.  Always turn off hyphenation; it makes
> .\" way too many mistakes in technical documents.
> .if n .ad l
> .nh
150c150
< on other aspects of the \s-1GNU\s0 linker. 
---
> on other aspects of the \s-1GNU\s0 linker.
156c156
< available kind of object file.  
---
> available kind of object file.
176c176
< \&        ld -o <output> /lib/crt0.o hello.o -lc
---
> \&        ld \-o <output> /lib/crt0.o hello.o \-lc
242c242
< \&          gcc -Wl,--startgroup foo.o bar.o -Wl,--endgroup
---
> \&          gcc \-Wl,\-\-startgroup foo.o bar.o \-Wl,\-\-endgroup
267c267
< archive-library search path.  
---
> archive-library search path.
336c336
< \&\fB0\fR for base 8).  
---
> \&\fB0\fR for base 8).
507c507
< some cases also on how it was configured.  
---
> some cases also on how it was configured.
562,563c562,563
< sets the text section to be read\-only, and forces the data segment to
< be page\-aligned.  Note \- this option does not enable linking against
---
> sets the text section to be read-only, and forces the data segment to
> be page-aligned.  Note \- this option does not enable linking against
1039c1039
< this option overrides it.  
---
> this option overrides it.
1106c1106
< When the linker encounters such a dependency when doing a non\-shared,
---
> When the linker encounters such a dependency when doing a non-shared,
1284c1284
< \&        <file>(<section>): warning: common of `<symbol>'
---
> \&        <file>(<section>): warning: common of \`<symbol>\*(Aq
1294c1294
< \&        <file>(<section>): warning: definition of `<symbol>'
---
> \&        <file>(<section>): warning: definition of \`<symbol>\*(Aq
1303c1303
< \&           of `<symbol>'
---
> \&           of \`<symbol>\*(Aq
1310c1310
< \&        <file>(<section>): warning: common of `<symbol>'
---
> \&        <file>(<section>): warning: common of \`<symbol>\*(Aq
1320c1320
< \&        <file>(<section>): warning: common of `<symbol>'
---
> \&        <file>(<section>): warning: common of \`<symbol>\*(Aq
1386c1386
< \&        __wrap_malloc (int c)
---
> \&        _\|_wrap_malloc (int c)
1389c1389
< \&          return __real_malloc (c);
---
> \&          return _\|_real_malloc (c);
1477c1477
< re\-exported, nor will symbols specifying the \s-1DLL\s0's internal layout 
---
> re-exported, nor will symbols specifying the \s-1DLL\s0's internal layout 
1605c1605
< "variable '<var>' can't be auto\-imported. Please read the 
---
> "variable '<var>' can't be auto-imported. Please read the 
1632c1632
< \&        extern_array[1] --> 
---
> \&        extern_array[1] \-\-> 
1640c1640
< \&        extern_array[1] --> 
---
> \&        extern_array[1] \-\-> 
1649,1650c1649,1650
< \&        extern_struct.field --> 
< \&           { volatile struct s *t=&extern_struct; t->field }
---
> \&        extern_struct.field \-\-> 
> \&           { volatile struct s *t=&extern_struct; t\->field }
1657c1657
< \&        extern_ll -->
---
> \&        extern_ll \-\->
1673c1673
< \&        --foo.h
---
> \&        \-\-foo.h
1675c1675
< \&        --foo.c
---
> \&        \-\-foo.c
1685c1685
< \&        --foo.h
---
> \&        \-\-foo.h
1687c1687
< \&        --foo.c
---
> \&        \-\-foo.c
1698,1701c1698,1701
< .Vb 14
< \&        --foo.h
< \&        /* Note: auto-export is assumed (no __declspec(dllexport)) */
< \&        #if (defined(_WIN32) || defined(__CYGWIN__)) && \e
---
> .Vb 10
> \&        \-\-foo.h
> \&        /* Note: auto\-export is assumed (no _\|_declspec(dllexport)) */
> \&        #if (defined(_WIN32) || defined(_\|_CYGWIN_\|_)) && \e
1703c1703
< \&        #define FOO_IMPORT __declspec(dllimport)
---
> \&        #define FOO_IMPORT _\|_declspec(dllimport)
1708c1708
< \&        --foo.c
---
> \&        \-\-foo.c
1785c1785
< in the search\-list, so ambiguities are resolved in favor of convention.
---
> in the search-list, so ambiguities are resolved in favor of convention.
